package main

import "fmt"

/* Pentagon numbers
Problem 44

Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2. The first ten pentagonal numbers are:

1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...

It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference, 70 − 22 = 48, is not pentagonal.

Find the pair of pentagonal numbers, Pj and Pk, for which their sum and difference are pentagonal and D = |Pk − Pj| is minimised; what is the value of D?

*** The Pair is: 1560090 and 7042750
*** Value of D : 5482660
*/

func myAbs(k int) int {
	var abs int
	if k <= 0 {
		abs = -k
	} else {
		abs = k
	}
	return abs
}

func containsInSlice(s []int, k int) bool {
	for _, n := range s {
		if k == n {
			return true
		}
	}
	return false
}

func printPentagon(n int) {
	var pentagon int
	var s []int
	for i := 1; i <= n; i++ {
		pentagon = i * (3*i - 1) / 2
		//println("p=", pentagon)
		s = append(s, pentagon)
	}
	//fmt.Println(len(s), "s=", s)

	//check pairs
	var addExists bool
	var diffExists bool
	for i := 0; i < len(s); i++ {
		for j := i + 1; j < len(s); j++ {
			//print(s[i], " ", s[j], " ")
			addExists = containsInSlice(s, s[i]+s[j])
			diffExists = containsInSlice(s, myAbs(s[j]-s[i]))
			if addExists == true && diffExists == true {
				fmt.Println("TRUE TRUE ******************************", s[i], s[j])
				fmt.Println("DIFF: ", myAbs(s[j]-s[i]))
			}
			//println(addExists, " ", diffExists)
		}
		//println("===")
	}
}
